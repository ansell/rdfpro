
RDFpro Core Library
===================

The `rdfpro-core` library provides the `RDFProcessor` abstraction, the implementation of processors for common tasks and the logic required for composing processors in a pipeline.
This library represent the basis of the `rdfpro` command line tool and can be embedded in applications to perform `rdfpro` tasks via Java code.

In order to use the `rdfpro-core` library you have to include the following dependency in your `pom.xml`:

    <dependency>
      <groupId>eu.fbk.rdfpro</groupId>
      <artifactId>rdfpro-core</artifactId>
      <version>${site-version}</version>
    </dependency>

Then, make sure to include `rdfpro` artifact repository:

    <repository>
      <id>rdfpro</id>
      <url>http://fracor.bitbucket.org/rdfpro/mvnrepo</url>
    </repository>

If you don't use Maven, you have to download and include the following mandatory JARs in the classpath:

  * [rdfpro-core-${site-version}.jar](http://fracor.bitbucket.org/rdfpro/mvnrepo/eu/fbk/rdfpro/rdfpro-core/${site-version}/rdfpro-core-${site-version}.jar)
  * [slf4j-api-1.7.7.jar](http://central.maven.org/maven2/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar) (or newer version)
  * [sesame-rio-api-2.7.14.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-rio-api/2.7.14/sesame-rio-api-2.7.14.jar) (or newer version)
  * [sesame-model-2.7.14.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-model/2.7.14/sesame-model-2.7.14.jar) (or newer version)
  * [sesame-util-2.7.14.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-util/2.7.14/sesame-util-2.7.14.jar) (or newer version)

Note that the three Sesame JARs are not necessary in case the `openrdf-sesame-2.7.X-onejar.jar` file is already included. The SLF4J API is used by Sesame for logging. You need to include also an implementation (e.g., [Logback](http://logback.qos.ch/)) for logging to work.

The library main abstraction is the interface [`RDFProcessor`](apidocs/eu/fbk/rdfpro/RDFProcessor.html). You can obtain `RDFProcessor` implementation for common processing tasks and you can apply sequential and parallel composition using the static factory methods in the companion class [`RDFProcessors`](apidocs/eu/fbk/rdfpro/RDFProcessors.html). You can also implement class `RDFProcessor` to build your own processor, which can then be used and composed in pipelines as done with builtin processors. See the [Javadoc](apidocs/eu/fbk/rdfpro/package-summary.html) for further details.
