
RDFpro Core Library
===================

The `rdfpro-core` library provides the `RDFProcessor` abstraction, the implementation of processors for common tasks and the logic required for composing processors in a pipeline.
This library represent the basis of the `rdfpro` command line tool and can be embedded in applications to perform `rdfpro` tasks via Java code.

In order to use the `rdfpro-core` library you have to include the following dependency in your `pom.xml`:

    <dependency>
      <groupId>eu.fbk.rdfpro</groupId>
      <artifactId>rdfpro-core</artifactId>
      <version>${project-version}</version>
    </dependency>

If you don't use Maven, you have to download and include the following mandatory JARs in the classpath:

  * [rdfpro-core-${project-version}.jar](http://central.maven.org/maven2/eu/fbk/rdfpro/rdfpro-core/${project-version}/rdfpro-core-${project-version}.jar)
  * [slf4j-api-${slf4j-version}.jar](http://central.maven.org/maven2/org/slf4j/slf4j-api/${slf4j-version}/slf4j-api-${slf4j-version}.jar) (or newer version)
  * [guava-${google-guava-version}.jar](http://central.maven.org/maven2/com/google/guava/guava/${google-guava-version}/guava-${google-guava-version}.jar) (or newer version)
  * [sesame-rio-api-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-rio-api/${sesame-version}/sesame-rio-api-${sesame-version}.jar) (or newer version)
  * [sesame-model-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-model/${sesame-version}/sesame-model-${sesame-version}.jar) (or newer version)
  * [sesame-util-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-util/${sesame-version}/sesame-util-${sesame-version}.jar) (or newer version)
  * [sesame-query-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-query/${sesame-version}/sesame-query-${sesame-version}.jar) (or newer version)
  * [sesame-queryparser-api-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-queryparser-api/${sesame-version}/sesame-queryparser-api-${sesame-version}.jar) (or newer version)
  * [sesame-queryparser-sparql-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-queryparser-sparql/${sesame-version}/sesame-queryparser-sparql-${sesame-version}.jar) (or newer version)
  * [sesame-queryalgebra-model-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-queryalgebra-model/${sesame-version}/sesame-queryalgebra-model-${sesame-version}.jar) (or newer version)
  * [sesame-queryalgebra-evaluation-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-queryalgebra-evaluation/${sesame-version}/sesame-queryalgebra-evaluation-${sesame-version}.jar) (or newer version)
  * [sesame-http-client-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-http-client/${sesame-version}/sesame-http-client-${sesame-version}.jar) (or newer version)

Note that the three Sesame JARs are not necessary in case the `openrdf-sesame-${sesame-version}-onejar.jar` file is already included. The SLF4J API is used by Sesame for logging. You need to include also an implementation (e.g., [Logback](http://logback.qos.ch/)) for logging to work.

In case you want to use the `@groovy` processor, you also have to include the following dependency in your `pom.xml`:

    <dependency>
      <groupId>eu.fbk.rdfpro</groupId>
      <artifactId>rdfpro-groovy</artifactId>
      <version>${project-version}</version>
    </dependency>

If you don't use Maven, ensure to download and include the additional JARs in the classpath:

  * [rdfpro-groovy-${project-version}.jar](http://central.maven.org/maven2/eu/fbk/rdfpro/rdfpro-groovy/${project-version}/rdfpro-groovy-${project-version}.jar)
  * [groovy-all-${groovy-version}.jar](http://central.maven.org/maven2/org/codehaus/groovy/groovy-all/${groovy-version}/groovy-all-${groovy-version}.jar) (or newer version)

The library main abstraction is the interface [`RDFProcessor`](apidocs/eu/fbk/rdfpro/RDFProcessor.html). You can obtain `RDFProcessor` implementation for common processing tasks and you can apply sequential and parallel composition using the static factory methods in the companion class [`RDFProcessors`](apidocs/eu/fbk/rdfpro/RDFProcessors.html). You can also implement interface `RDFProcessor` to build your own processor, which can then be used and composed in pipelines as done with builtin processors. See the [Javadoc](apidocs/eu/fbk/rdfpro/package-summary.html) for further details.
