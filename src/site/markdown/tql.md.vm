
TQL Library
===========

Turtle Quads (TQL) is a line-oriented RDF format similar to NQuads but using the more permissive (and efficient!) Turtle encoding for characters.
It has been introduced by [DBpedia](http://wiki.dbpedia.org/Internationalization/Guide) for its dump files and it is supported in input by the Virtuoso triple store. TQL is the preferred format for manipulating RDF data in RDFpro.

The `rdfpro-tql` module extends Sesame RIO with support for the TQL format. In order to use it you have to include the following dependency in your `pom.xml`:

    <dependency>
      <groupId>eu.fbk.rdfpro</groupId>
      <artifactId>rdfpro-tql</artifactId>
      <version>${project-version}</version>
    </dependency>

If you don't use Maven, you have to download and include the following JARs in the classpath:

  * [rdfpro-tql-${project-version}.jar](http://central.maven.org/maven2/eu/fbk/rdfpro/rdfpro-jsonld/${project-version}/rdfpro-tql-${project-version}.jar)
  * [slf4j-api-${slf4j-version}.jar](http://central.maven.org/maven2/org/slf4j/slf4j-api/${slf4j-version}/slf4j-api-${slf4j-version}.jar) (or newer version)
  * [sesame-rio-api-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-rio-api/${sesame-version}/sesame-rio-api-${sesame-version}.jar) (or newer version)
  * [sesame-model-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-model/${sesame-version}/sesame-model-${sesame-version}.jar) (or newer version)
  * [sesame-util-${sesame-version}.jar](http://central.maven.org/maven2/org/openrdf/sesame/sesame-util/${sesame-version}/sesame-util-${sesame-version}.jar) (or newer version)

Note that the three Sesame JARs are not necessary in case the `openrdf-sesame-${sesame-version}-onejar.jar` file is already included. The SLF4J API is used by Sesame for logging. You need to include also an implementation (e.g., [Logback](http://logback.qos.ch/)) for logging to work.

As TQL is not part of the predefined set of Sesame [`RDFFormat`](http://rdf4j.org/sesame/2.7/apidocs/org/openrdf/rio/RDFFormat.html)s, it is necessary to register it.
This can be done either via [`RDFFormat#register()`](http://rdf4j.org/sesame/2.7/apidocs/org/openrdf/rio/RDFFormat.html#register\(org.openrdf.rio.RDFFormat\)), passing the [`TQL.FORMAT`](apidocs/eu/fbk/rdfpro/tql/TQL.html#FORMAT) constant, or by simply calling method [`TQL.register()`](apidocs/eu/fbk/rdfpro/tql/TQL.html#register--) on the `TQL` class, which ensures that multiple calls will result in a single registration.

A note on performances. The TQL parser and writer operate by reading / writing a character at a time, relying on the underlying stream for proper buffering. For optimal performances, make sure to use them with a [`BufferedReader`](http://docs.oracle.com/javase/7/docs/api/java/io/BufferedReader.html) or [`BufferedWriter`](http://docs.oracle.com/javase/7/docs/api/java/io/BufferedWriter.html), or, better, with their corresponding unsynchronized variants produced by methods `IO.buffer()` of the [`IO`](apidocs/eu/fbk/rdfpro/util/IO.html) utility class.
