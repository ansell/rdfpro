plugin,eu.fbk.rdfpro.RDFProcessors,create,read,r=\
\n@read|@r        Read quads from files, augmenting the input stream\
\n  [-b URI]      use base URI to resolve relative URIs (default: empty base)\
\n  [-p]          preserve BNodes instead of rewriting them on a per-file basis\
\n  FILE...       read from specified FILEs (also URLs supported)

plugin,eu.fbk.rdfpro.RDFProcessors,create,write,w=\
\n@write|@w       Writes quads to FILEs (round-robin) and emits them in output\
\n  [-c NUM]      the number of consecutive quads to write as a chunk to each FILE\
\n  FILE...       write to the specified FILEs

plugin,eu.fbk.rdfpro.RDFProcessors,create,transform,t=\
\n@transform|@t   Discards/replaces quads based on matching and replace exp.\
\n  [EXP]         sequence of rules on quad components X (values: s, p, o, c):\
\n                  +X value list => quad dropped if X not belongs to list\
\n                  -X vlaue list => quad dropped if X belongs to list\
\n                  =X value => component X replaced with value (after filters)\
\n                values are in Turtle and include following wildcard values: <*>\
\n                => any URI; _:* => any BNode; * => any plain literal; *@* => any\
\n                lang literal; *^^* => any typed literal; *@xyz => literals lang\
\n                xyz; *^^<uri> => literals type <uri>; *^^ns:iri => literals type\
\n                ns:iri; *^^ns:* => literals any type with prefix ns; ns:* => any\
\n                uri with prefix ns; <ns*> => any uri in namespace ns

plugin,eu.fbk.rdfpro.RDFProcessors,create,unique,u=\
\n@unique|@u      Discards duplicates in the input stream\
\n  [-m]          merges quads with same <s,p,o> and different graphs in a unique\
\n                quad, put in a graph described with quads of all source graphs

plugin,eu.fbk.rdfpro.RDFProcessors,create,prefix,p=\
\n@prefix|@p      Adds missing prefix-to-namespace bindings\
\n  [-f FILE]     use prefixes from FILE instead of prefix.cc

plugin,eu.fbk.rdfpro.RDFProcessors,create,smush=\
\n@smush          Performs smushing, using a single URI for each sameAs cluster\
\n  URI...        use ranked namespace URIs to select canonical URIs

plugin,eu.fbk.rdfpro.RDFProcessors,create,tbox=\
\n@tbox           Emits only quads belonging to RDFS or OWL TBox axioms.

plugin,eu.fbk.rdfpro.RDFProcessors,create,rdfs=\
\n@rdfs           Emits the RDFS closure of input quads\
\n  [-e RULES]    exclude RULES in comma-separated list (default: no exclusions)\
\n  [-d]          decompose OWL axioms to RDFS (e.g. equivalentClass -> subClass)\
\n  [-t]          drop uninformative <x rdf:type _:b> statements (default: keep)\
\n  [-C | -c URI] emits closed TBox to default graph [-C] or graph URI [-c]\
\n  [-b URI][-p]  use base URI [-b] and optional BNode preserving [-p] to load TBox\
\n  [FILE...]     load TBox from FILE... (default: extract from input stream)

plugin,eu.fbk.rdfpro.RDFProcessors,create,stats=\
\n@stats          Emits VOID structural statistics for its input\
\n  [-n URI]      use namespace URI to mint URIs for VOID dataset instances\
\n  [-p URI]      create a dataset for graphs linked to a source via property URI\
\n  [-c URI]      look for graph-to-source quads in graph URI\
\n  [-t NUM]      emits only VOID partitions with at least NUM entities or triples\
\n  [-o]          enable computation of void:classes and void:properties (costly)

plugin,eu.fbk.rdfpro.RDFProcessors,create,query=\
\n@query          Download quads from a SPARQL endpoint, augmenting the stream\
\n  [-q QUERY]    use specified SPARQL QUERY (use quoting!)\
\n  [-f FILE]     load SPARQL QUERY from FILE\
\n  [-p]          preserve downloaded BNodes rather than rewriting them\
\n  URL           use endpoint at URL

plugin,eu.fbk.rdfpro.RDFProcessors,create,update=\
\n@update         Uploads quads to a SPARQL endpoint and emits them in output\
\n  [-s SIZE]     use chunks of SIZE quads for each upload call (default: 1024)\
\n  URL           use endpoint at URL

